{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA,wCAAwC","sourcesContent":["/// <reference types=\"@capacitor/cli\" />\r\n\r\nexport interface InitializeOptions {\r\n  /**\r\n   * Your Mixpanel API token\r\n   *\r\n   * @required\r\n   */\r\n  token: string;\r\n  /**\r\n   * Enable or disable autotracking\r\n   *\r\n   * @default true\r\n   */\r\n  autotrack?: boolean;\r\n  /**\r\n   * Opting users out of tracking by this Mixpanel instance by default\r\n   *\r\n   * @default false\r\n   */\r\n  optOutByDefault?: boolean;\r\n  /**\r\n   * Enable or disable debug mode\r\n   *\r\n   * @default false\r\n   */\r\n  debug?: boolean;\r\n}\r\n\r\nexport interface TrackOptions {\r\n  /**\r\n   * The name of the event. This can be anything the user does - 'Button Click', 'Sign Up', 'Item Purchased', etc.\r\n   *\r\n   * @required\r\n   */\r\n  event: string;\r\n  /**\r\n   * A set of properties to include with the event you're sending. These describe the user who did the event or details about the event itself.\r\n   *\r\n   * @default {}\r\n   */\r\n  properties?: TrackProperties;\r\n}\r\n\r\nexport interface TrackProperties {\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface IdentifyOptions {\r\n  /**\r\n   * A string that uniquely identifies a user. If not provided, the distinct_id currently in the persistent store (cookie or localStorage) will be used.\r\n   */\r\n  distinctId?: string;\r\n}\r\n\r\nexport interface AliasOptions {\r\n  /**\r\n   * A unique identifier that you want to use for this user in the future.\r\n   *\r\n   * @required\r\n   */\r\n  alias: string;\r\n  /**\r\n   * The current identifier being used for this user.\r\n   */\r\n  distinctId?: string;\r\n}\r\n\r\nexport interface SuperPropertyOptions {\r\n  /**\r\n   * An associative array of properties to store about the user\r\n   *\r\n   * @required\r\n   */\r\n  properties?: any;\r\n}\r\n\r\nexport interface ProfileProperties {\r\n  /**\r\n   * An associative array of properties to store about the user\r\n   *\r\n   * @required\r\n   */\r\n  properties?: any;\r\n}\r\n\r\nexport interface ChargeOptions {\r\n  /**\r\n   * The amount of the transaction\r\n   *\r\n   * @required\r\n   */\r\n  amount: number;\r\n  /**\r\n   * An associative array of properties to store about the transaction\r\n   *\r\n   * @default {}\r\n   */\r\n  properties?: any;\r\n}\r\n\r\nexport interface OptInOptions {\r\n  /**\r\n   * String that uniquely identifies the current user.\r\n   */\r\n  distinctId?: string;\r\n  /**\r\n   * An associative array of properties to store about the user\r\n   */\r\n  properties?: any;\r\n}\r\n\r\nexport interface MixpanelPlugin {\r\n  /**\r\n   * Initialize the plugin (web only)\r\n   *\r\n   * @platforms web\r\n   */\r\n  initialize(options: InitializeOptions): Promise<void>;\r\n\r\n  /**\r\n   * Returns the current distinct id of the user. This is either the id automatically generated by the library or the id that has been passed by a call to identify().\r\n   *\r\n   * @platforms ios, android, web\r\n   */\r\n  distinctId(): Promise<{ value: string }>;\r\n\r\n  /**\r\n   * Tracks an event with properties. Properties are optional and can be added only if needed.\r\n   *\r\n   * @platforms ios, android, web\r\n   */\r\n  track(options: TrackOptions): Promise<void>;\r\n\r\n  /**\r\n   * Identify a user with a unique ID to track user activity across devices, tie a user to their events, and create a user profile. If you never call this method, unique visitors are tracked using a UUID generated the first time they visit the site.\r\n   *\r\n   * @platforms ios, android, web\r\n   */\r\n  identify(options: IdentifyOptions): Promise<void>;\r\n\r\n  /**\r\n   * The alias method creates an alias which Mixpanel will use to remap one id to another. Multiple aliases can point to the same identifier.\r\n   *\r\n   * @platforms ios, android, web\r\n   */\r\n  alias(options: AliasOptions): Promise<void>;\r\n\r\n  /**\r\n   * Clears super properties and generates a new random distinct_id for this instance. Useful for clearing data when a user logs out.\r\n   *\r\n   * @platforms ios, android, web\r\n   */\r\n  reset(): Promise<void>;\r\n\r\n  /**\r\n   * Clears all currently set super properties.\r\n   *\r\n   * @platforms ios, android, web\r\n   */\r\n  clearSuperProperties(): Promise<void>;\r\n\r\n  /**\r\n   * Returns the currently set super properties.\r\n   *\r\n   * @platforms ios, android, web\r\n   */\r\n  currentSuperProperties(): Promise<{ properties: any }>;\r\n\r\n  /**\r\n   * Register super properties that will be sent with every event.\r\n   *\r\n   * @platforms ios, android, web\r\n   */\r\n  registerSuperProperties(options: SuperPropertyOptions): Promise<void>;\r\n\r\n  /**\r\n   * Set properties on the current user in Mixpanel People.\r\n   *\r\n   * @platforms ios, android, web\r\n   */\r\n  setProfile(options: ProfileProperties): Promise<void>;\r\n\r\n  /**\r\n   * Union list properties.\r\n   *\r\n   * @platforms ios, android, web\r\n   */\r\n  setProfileUnion(options: ProfileProperties): Promise<void>;\r\n\r\n  /**\r\n   * Permanently deletes the current people analytics profile from Mixpanel (using the current distinctId).\r\n   *\r\n   * @platforms ios, android, web\r\n   */\r\n  deleteProfile(): Promise<void>;\r\n\r\n  /**\r\n   * Track money spent by the current user for revenue analytics and associate properties with the charge. Properties is optional.\r\n   *\r\n   * @platforms ios, android, web\r\n   */\r\n  trackCharge(options: ChargeOptions): Promise<void>;\r\n\r\n  /**\r\n   * Uploads queued data to the Mixpanel server. (only ios, android)\r\n   *\r\n   * @platforms ios, android\r\n   */\r\n  flush(): Promise<void>;\r\n\r\n  /**\r\n   * Opt in tracking.\r\n   *\r\n   * Use this method to opt in an already opted out user from tracking. People updates and track calls will be sent to Mixpanel after using this method.\r\n   *\r\n   * @platforms ios, android, web\r\n   */\r\n  optInTracking(options: OptInOptions): Promise<void>;\r\n\r\n  /**\r\n   * Opt out tracking.\r\n   *\r\n   * This method is used to opt out tracking. This causes all events and people request no longer to be sent back to the Mixpanel server.\r\n   *\r\n   * @platforms ios, android, web\r\n   */\r\n  optOutTracking(): Promise<void>;\r\n\r\n  /**\r\n   * Returns the current opt-out status.\r\n   *\r\n   * @platforms ios, android, web\r\n   */\r\n  hasOptedOutTracking(): Promise<{ value: boolean }>;\r\n}\r\n\r\ndeclare module '@capacitor/cli' {\r\n  export interface PluginsConfig {\r\n    Mixpanel?: {\r\n      /**\r\n       * Mixpanel Token\r\n       *\r\n       * @required\r\n       * @example \"asdf1234asdf1234\"\r\n       */\r\n      token?: string;\r\n\r\n      /**\r\n       * Optional. Whether or not to collect common mobile events. Default is true.\r\n       *\r\n       * @default true\r\n       */\r\n      trackAutomaticEvents?: boolean;\r\n\r\n      /**\r\n       * Optional. Whether or not Mixpanel can start tracking immediately. Default is false.\r\n       *\r\n       * @required\r\n       * @default false\r\n       */\r\n      optOutTrackingByDefault?: boolean;\r\n\r\n      /**\r\n       * Optional. Disables ip collection on iOS devices. Default is false.\r\n       * For Android, this is done via a meta-data property. See {@link https://help.mixpanel.com/hc/en-us/articles/115004494803}\r\n       *\r\n       * @required\r\n       * @default false\r\n       */\r\n      disableIosIpCollection?: boolean;\r\n\r\n      /**\r\n       * Optional. Mixpanel cluster URL or EU server URL. Defaults to US server.\r\n       *\r\n       * @default \"https://api.mixpanel.com\"\r\n       * @example \"https://api-eu.mixpanel.com/\"\r\n       */\r\n      serverURL?: string;\r\n    };\r\n  }\r\n}\r\n"]}